#!/bin/sh


#READ_ME THESE ARE INPUT PARAMETERS
#read -e -p "Length of Sequence: (5000 or 10000) " -i 5000 n
#read -e -p "Duplicates: (D or ND) " -i "D" D
#read -e -p "Order: (-R (Random) or -ns (Reverse) or -n (Sorted)) " -i "-ns" flag
#read -e -p "Number of runs for averaging: (Positive Integer) " -i 10 runs


filename="whateverFile"

totalMyTime=0
totalTheirTime=0

n=$1
D=$2
flag=$3
runs=$4




if [ $D=="D" ]
then 
    script="./randList"
elif [ $D=="ND"]
then
    script="seq"
fi


for (( t=1; $t<=$runs; t++))
do 
    #echo ____ Run $t $flag $D $n ____
    ### initiate Sequence
    seq $n | sort $flag > $filename

    (time ./useIntList < $filename) 1> /dev/null 2> tmp
    #minutes
    time1=`cat tmp | egrep "user" | sed 's/.*r//;s/m.*//'`
    #seconds
    time2=`cat tmp | egrep "user" | sed 's/.*m//;s/s//'`
    #runtime in seconds
    time=$(echo $time1*60 + $time2 | bc)
    echo $time 
    totalMyTime=$(echo $totalMyTime + $time | bc)
    
    (time sort -n < $filename) 1> /dev/null 2> tmp2
    #minutes
    time1=`cat tmp2 | egrep "user" | sed 's/.*r//;s/m.*//'`
    #seconds
    time2=`cat tmp2 | egrep "user" | sed 's/.*m//;s/s//'`
    #runtime in seconds
    time=$(echo $time1*60 + $time2 | bc)
    time=`cat tmp2 | egrep "user" | sed 's/.*m//;s/s//'`
    #echo $time
    totalTheirTime=$(echo $totalTheirTime + $time | bc)
done

echo ____ $runs "Runs" $flag $D $n  ____
echo === MyTest avg ===
echo "user1" $Test $(bc <<< "scale=3;$totalMyTime / $runs")
echo === TheirTest avg ===
echo "user2" $Test $(bc <<< "scale=3;$totalTheirTime / $runs")



